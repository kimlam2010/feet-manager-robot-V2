generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  hashedPassword   String
  role             String    @default("user")
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  auditLogs        AuditLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id        String      @id @default(cuid())
  action    String
  resource  String
  details   String?
  status    String
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  robotId   String?
  robot     Robot?     @relation(fields: [robotId], references: [id])
  worksetId String?
  workset   Workset?   @relation(fields: [worksetId], references: [id])

  @@index([userId])
  @@index([robotId])
  @@index([worksetId])
  @@index([createdAt])
}

model Robot {
  id            String    @id @default(cuid())
  name          String
  serialNumber  String    @unique
  status        RobotStatus @default(OFFLINE)
  batteryLevel  Int       @default(100)
  location      String?
  firmware      String
  lastActive    DateTime?
  configuration Json?
  healthStatus  HealthStatus @default(GOOD)
  worksetId     String?
  workset       Workset?  @relation(fields: [worksetId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  auditLogs     AuditLog[]

  @@index([worksetId])
}

model Workset {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      WorksetStatus @default(INACTIVE)
  schedule    Json?
  robots      Robot[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  auditLogs   AuditLog[]
}

enum RobotStatus {
  ONLINE
  OFFLINE
  BUSY
  ERROR
  MAINTENANCE
}

enum HealthStatus {
  GOOD
  WARNING
  CRITICAL
}

enum WorksetStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
  COMPLETED
  FAILED
} 